// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workspace.sql

package db

import (
	"context"
	"database/sql"
)

const addMemberToWorkspace = `-- name: AddMemberToWorkspace :exec
INSERT OR IGNORE INTO workspace_members (workspace_id, user_id)
VALUES (?, ?)
`

type AddMemberToWorkspaceParams struct {
	WorkspaceID string `json:"workspace_id"`
	UserID      string `json:"user_id"`
}

func (q *Queries) AddMemberToWorkspace(ctx context.Context, arg AddMemberToWorkspaceParams) error {
	_, err := q.db.ExecContext(ctx, addMemberToWorkspace, arg.WorkspaceID, arg.UserID)
	return err
}

const createWorkspace = `-- name: CreateWorkspace :exec
INSERT INTO workspaces (id, name, owner_id) 
VALUES (?, ?, ?)
`

type CreateWorkspaceParams struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	OwnerID string `json:"owner_id"`
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) error {
	_, err := q.db.ExecContext(ctx, createWorkspace, arg.ID, arg.Name, arg.OwnerID)
	return err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
DELETE FROM workspaces WHERE id = ?
`

func (q *Queries) DeleteWorkspace(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteWorkspace, id)
	return err
}

const getWorkspaceByID = `-- name: GetWorkspaceByID :one
SELECT id, name, owner_id FROM workspaces WHERE id = ?
`

func (q *Queries) GetWorkspaceByID(ctx context.Context, id string) (Workspace, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceByID, id)
	var i Workspace
	err := row.Scan(&i.ID, &i.Name, &i.OwnerID)
	return i, err
}

const getWorkspaceByUserID = `-- name: GetWorkspaceByUserID :many
SELECT w.id, w.name, w.owner_id
FROM workspaces w
WHERE w.owner_id = ?
`

func (q *Queries) GetWorkspaceByUserID(ctx context.Context, ownerID string) ([]Workspace, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspaceByUserID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workspace{}
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(&i.ID, &i.Name, &i.OwnerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkspaceMembers = `-- name: ListWorkspaceMembers :many
SELECT u.id, u.username, u.password_hash, u.email, u.roles
FROM users u
JOIN workspace_members wm ON u.id = wm.user_id
WHERE wm.workspace_id = ?
`

func (q *Queries) ListWorkspaceMembers(ctx context.Context, workspaceID string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listWorkspaceMembers, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.Roles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkspacesWithMembersByUserID = `-- name: ListWorkspacesWithMembersByUserID :many
SELECT w.id, w.name, w.owner_id, wm.user_id
FROM workspaces w
LEFT JOIN workspace_members wm ON w.id = wm.workspace_id
WHERE w.owner_id = ? OR wm.user_id = ?
ORDER BY w.id
`

type ListWorkspacesWithMembersByUserIDParams struct {
	OwnerID string `json:"owner_id"`
	UserID  string `json:"user_id"`
}

type ListWorkspacesWithMembersByUserIDRow struct {
	ID      string         `json:"id"`
	Name    string         `json:"name"`
	OwnerID string         `json:"owner_id"`
	UserID  sql.NullString `json:"user_id"`
}

func (q *Queries) ListWorkspacesWithMembersByUserID(ctx context.Context, arg ListWorkspacesWithMembersByUserIDParams) ([]ListWorkspacesWithMembersByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listWorkspacesWithMembersByUserID, arg.OwnerID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListWorkspacesWithMembersByUserIDRow{}
	for rows.Next() {
		var i ListWorkspacesWithMembersByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMemberFromWorkspace = `-- name: RemoveMemberFromWorkspace :exec
DELETE FROM workspace_members
WHERE workspace_id = ? AND user_id = ?
`

type RemoveMemberFromWorkspaceParams struct {
	WorkspaceID string `json:"workspace_id"`
	UserID      string `json:"user_id"`
}

func (q *Queries) RemoveMemberFromWorkspace(ctx context.Context, arg RemoveMemberFromWorkspaceParams) error {
	_, err := q.db.ExecContext(ctx, removeMemberFromWorkspace, arg.WorkspaceID, arg.UserID)
	return err
}

const renameWorkspace = `-- name: RenameWorkspace :exec
UPDATE workspaces
SET name = ?
WHERE id = ?
`

type RenameWorkspaceParams struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (q *Queries) RenameWorkspace(ctx context.Context, arg RenameWorkspaceParams) error {
	_, err := q.db.ExecContext(ctx, renameWorkspace, arg.Name, arg.ID)
	return err
}
