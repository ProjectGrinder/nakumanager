// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: project.sql

package db

import (
	"context"
	"database/sql"
)

const addMemberToProject = `-- name: AddMemberToProject :exec
INSERT OR IGNORE INTO project_members (project_id, user_id)
VALUES (?, ?)
`

type AddMemberToProjectParams struct {
	ProjectID string `json:"project_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) AddMemberToProject(ctx context.Context, arg AddMemberToProjectParams) error {
	_, err := q.db.ExecContext(ctx, addMemberToProject, arg.ProjectID, arg.UserID)
	return err
}

const createProject = `-- name: CreateProject :exec
INSERT INTO projects (
  id, name, status, priority, workspace_id, team_id, leader_id, start_date, end_date, label, created_by
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateProjectParams struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Status      sql.NullString `json:"status"`
	Priority    sql.NullString `json:"priority"`
	WorkspaceID string         `json:"workspace_id"`
	TeamID      string         `json:"team_id"`
	LeaderID    sql.NullString `json:"leader_id"`
	StartDate   sql.NullTime   `json:"start_date"`
	EndDate     sql.NullTime   `json:"end_date"`
	Label       sql.NullString `json:"label"`
	CreatedBy   string         `json:"created_by"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) error {
	_, err := q.db.ExecContext(ctx, createProject,
		arg.ID,
		arg.Name,
		arg.Status,
		arg.Priority,
		arg.WorkspaceID,
		arg.TeamID,
		arg.LeaderID,
		arg.StartDate,
		arg.EndDate,
		arg.Label,
		arg.CreatedBy,
	)
	return err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects WHERE id = ?
`

func (q *Queries) DeleteProject(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, name, status, priority, workspace_id, team_id, leader_id, start_date, end_date, label, created_by
FROM projects
WHERE id = ?
`

func (q *Queries) GetProjectByID(ctx context.Context, id string) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.Priority,
		&i.WorkspaceID,
		&i.TeamID,
		&i.LeaderID,
		&i.StartDate,
		&i.EndDate,
		&i.Label,
		&i.CreatedBy,
	)
	return i, err
}

const getProjectsByUserID = `-- name: GetProjectsByUserID :many
SELECT p.id, p.name, p.status, p.priority, p.workspace_id, p.team_id, p.leader_id, p.start_date, p.end_date, p.label, p.created_by
FROM projects p
JOIN project_members pm ON p.id = pm.project_id
WHERE pm.user_id = ?
`

func (q *Queries) GetProjectsByUserID(ctx context.Context, userID string) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjectsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.Priority,
			&i.WorkspaceID,
			&i.TeamID,
			&i.LeaderID,
			&i.StartDate,
			&i.EndDate,
			&i.Label,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isProjectExists = `-- name: IsProjectExists :one
SELECT COUNT(*) AS count
FROM projects
WHERE id = ?
`

func (q *Queries) IsProjectExists(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, isProjectExists, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listProjectMembers = `-- name: ListProjectMembers :many
SELECT u.id, u.username, u.password_hash, u.email, u.roles
FROM users u
JOIN project_members pm ON u.id = pm.user_id
WHERE pm.project_id = ?
`

func (q *Queries) ListProjectMembers(ctx context.Context, projectID string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listProjectMembers, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.Roles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectsByWorkspace = `-- name: ListProjectsByWorkspace :many
SELECT id, name, status, priority, workspace_id, leader_id, start_date, end_date, label
FROM projects
WHERE workspace_id = ?
ORDER BY start_date DESC
`

type ListProjectsByWorkspaceRow struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Status      sql.NullString `json:"status"`
	Priority    sql.NullString `json:"priority"`
	WorkspaceID string         `json:"workspace_id"`
	LeaderID    sql.NullString `json:"leader_id"`
	StartDate   sql.NullTime   `json:"start_date"`
	EndDate     sql.NullTime   `json:"end_date"`
	Label       sql.NullString `json:"label"`
}

func (q *Queries) ListProjectsByWorkspace(ctx context.Context, workspaceID string) ([]ListProjectsByWorkspaceRow, error) {
	rows, err := q.db.QueryContext(ctx, listProjectsByWorkspace, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProjectsByWorkspaceRow{}
	for rows.Next() {
		var i ListProjectsByWorkspaceRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.Priority,
			&i.WorkspaceID,
			&i.LeaderID,
			&i.StartDate,
			&i.EndDate,
			&i.Label,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMemberFromProject = `-- name: RemoveMemberFromProject :exec
DELETE FROM project_members
WHERE project_id = ? AND user_id = ?
`

type RemoveMemberFromProjectParams struct {
	ProjectID string `json:"project_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) RemoveMemberFromProject(ctx context.Context, arg RemoveMemberFromProjectParams) error {
	_, err := q.db.ExecContext(ctx, removeMemberFromProject, arg.ProjectID, arg.UserID)
	return err
}


const updateLeaderID = `-- name: UpdateLeaderID :exec
UPDATE projects
SET leader_id = ?
WHERE id = ?
`

type UpdateLeaderIDParams struct {
	LeaderID sql.NullString `json:"leader_id"`
	ID       string         `json:"id"`
}

func (q *Queries) UpdateLeaderID(ctx context.Context, arg UpdateLeaderIDParams) error {
	_, err := q.db.ExecContext(ctx, updateLeaderID, arg.LeaderID, arg.ID)
	return err
}

const updateProject = `-- name: UpdateProject :exec
UPDATE projects
SET status = ?, priority = ?, start_date = ?, end_date = ?, label = ?
WHERE id = ?
`

type UpdateProjectParams struct {
	Status    sql.NullString `json:"status"`
	Priority  sql.NullString `json:"priority"`
	StartDate sql.NullTime   `json:"start_date"`
	EndDate   sql.NullTime   `json:"end_date"`
	Label     sql.NullString `json:"label"`
	ID        string         `json:"id"`

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject,
		arg.Status,
		arg.Priority,

		arg.StartDate,
		arg.EndDate,
		arg.Label,
		arg.ID,
	)
	return err
}


const updateProjectName = `-- name: UpdateProjectName :exec
UPDATE projects
SET name = ?
WHERE id = ?
`

type UpdateProjectNameParams struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (q *Queries) UpdateProjectName(ctx context.Context, arg UpdateProjectNameParams) error {
	_, err := q.db.ExecContext(ctx, updateProjectName, arg.Name, arg.ID)
	return err
}

const updateWorkspaceID = `-- name: UpdateWorkspaceID :exec
UPDATE projects
SET workspace_id = ?
WHERE id = ?
`

type UpdateWorkspaceIDParams struct {
	WorkspaceID string `json:"workspace_id"`
	ID          string `json:"id"`
}

func (q *Queries) UpdateWorkspaceID(ctx context.Context, arg UpdateWorkspaceIDParams) error {
	_, err := q.db.ExecContext(ctx, updateWorkspaceID, arg.WorkspaceID, arg.ID)
	return err
}

