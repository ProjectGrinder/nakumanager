// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: view.sql

package db

import (
	"context"
)

const addGroupByToView = `-- name: AddGroupByToView :exec
INSERT INTO view_group_bys (view_id, group_by)
VALUES (?, ?)
`

type AddGroupByToViewParams struct {
	ViewID  string `json:"view_id"`
	GroupBy string `json:"group_by"`
}

func (q *Queries) AddGroupByToView(ctx context.Context, arg AddGroupByToViewParams) error {
	_, err := q.db.ExecContext(ctx, addGroupByToView, arg.ViewID, arg.GroupBy)
	return err
}

const addIssueToView = `-- name: AddIssueToView :exec
INSERT OR IGNORE INTO view_issues (view_id, issue_id)
VALUES (?, ?)
`

type AddIssueToViewParams struct {
	ViewID  string `json:"view_id"`
	IssueID string `json:"issue_id"`
}

func (q *Queries) AddIssueToView(ctx context.Context, arg AddIssueToViewParams) error {
	_, err := q.db.ExecContext(ctx, addIssueToView, arg.ViewID, arg.IssueID)
	return err
}

const createView = `-- name: CreateView :exec
INSERT INTO views (name, user_id, team_id)
VALUES (?, ?, ?)
`

type CreateViewParams struct {
	Name   string `json:"name"`
	UserID string `json:"user_id"`
	TeamID string `json:"team_id"`
}

func (q *Queries) CreateView(ctx context.Context, arg CreateViewParams) error {
	_, err := q.db.ExecContext(ctx, createView, arg.Name, arg.UserID, arg.TeamID)
	return err
}

const deleteView = `-- name: DeleteView :exec
DELETE FROM views WHERE id = ?
`

func (q *Queries) DeleteView(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteView, id)
	return err
}

const getViewByID = `-- name: GetViewByID :one
SELECT id, name, user_id, team_id
FROM views
WHERE id = ?
`

func (q *Queries) GetViewByID(ctx context.Context, id string) (View, error) {
	row := q.db.QueryRowContext(ctx, getViewByID, id)
	var i View
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.TeamID,
	)
	return i, err
}

const listGroupBysByViewID = `-- name: ListGroupBysByViewID :many
SELECT group_by
FROM view_group_bys
WHERE view_id = ?
`

func (q *Queries) ListGroupBysByViewID(ctx context.Context, viewID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listGroupBysByViewID, viewID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var group_by string
		if err := rows.Scan(&group_by); err != nil {
			return nil, err
		}
		items = append(items, group_by)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIssuesByViewID = `-- name: ListIssuesByViewID :many
SELECT i.id, i.title, i.content, i.priority, i.status, i.assignee, i.project_id, i.team_id, i.start_date, i.end_date, i.label, i.owner_id
FROM issues i
JOIN view_issues vi ON i.id = vi.issue_id
WHERE vi.view_id = ?
`

func (q *Queries) ListIssuesByViewID(ctx context.Context, viewID string) ([]Issue, error) {
	rows, err := q.db.QueryContext(ctx, listIssuesByViewID, viewID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Issue{}
	for rows.Next() {
		var i Issue
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Priority,
			&i.Status,
			&i.Assignee,
			&i.ProjectID,
			&i.TeamID,
			&i.StartDate,
			&i.EndDate,
			&i.Label,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listViewsByUser = `-- name: ListViewsByUser :many
SELECT id, name, user_id, team_id
FROM views
WHERE user_id = ?
ORDER BY name
`

func (q *Queries) ListViewsByUser(ctx context.Context, userID string) ([]View, error) {
	rows, err := q.db.QueryContext(ctx, listViewsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []View{}
	for rows.Next() {
		var i View
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeGroupByFromView = `-- name: RemoveGroupByFromView :exec
DELETE FROM view_group_bys
WHERE view_id = ? AND group_by = ?
`

type RemoveGroupByFromViewParams struct {
	ViewID  string `json:"view_id"`
	GroupBy string `json:"group_by"`
}

func (q *Queries) RemoveGroupByFromView(ctx context.Context, arg RemoveGroupByFromViewParams) error {
	_, err := q.db.ExecContext(ctx, removeGroupByFromView, arg.ViewID, arg.GroupBy)
	return err
}

const removeIssueFromView = `-- name: RemoveIssueFromView :exec
DELETE FROM view_issues
WHERE view_id = ? AND issue_id = ?
`

type RemoveIssueFromViewParams struct {
	ViewID  string `json:"view_id"`
	IssueID string `json:"issue_id"`
}

func (q *Queries) RemoveIssueFromView(ctx context.Context, arg RemoveIssueFromViewParams) error {
	_, err := q.db.ExecContext(ctx, removeIssueFromView, arg.ViewID, arg.IssueID)
	return err
}
